using System;
using System.Collections.Generic;
using System.Linq;

namespace solution
{
    class Program
    {
        static void Main(string[] args)
        {
            int n= int.Parse(Console.ReadLine());
            while(n>0)
            {
              string bookTitle= Console.ReadLine();
              string bookCategory= Console.ReadLine();
              int bookAmount= int.Parse(Console.ReadLine());
              var book = new Book(bookTitle,bookCategory,bookAmount);
              BookManager.AddBook(book);              
              n--;
            }
           
            int choice = int.Parse(Console.ReadLine());
           

   #region Solution-1
            switch(choice)
            {
                case 1 : {
                    string bookundercost = Console.ReadLine();
                    Book b = BookManager.FindCostliestunderBook(bookundercost);
                    if(b != null)
                        Console.WriteLine(b.BookTitle+"/"+b.BookCategory+"/"+b.BookAmount);
                    else
                        Console.WriteLine("Books are not available under category "+bookundercost);

                    break;
                }

                case 2 : {
                    int Findbookidexist = Convert.ToInt32(Console.ReadLine());
                    if(!BookManager.Books.Exists(x => x.BookId == Findbookidexist))
                    {
                        Console.WriteLine("Book "+Findbookidexist+" not found");
                        break;
                    }
                    List<Book> books = BookManager.Delete(Findbookidexist);
                    Console.WriteLine("Book "+Findbookidexist+" deleted successfully");

                    books.ForEach(s => {Console.WriteLine(s.BookId+"/"+s.BookTitle+"/"+s.BookCategory+"/"+s.BookAmount);});
                    
                    break;
                }

                case 3 : {
                    string booknamectitle1= Console.ReadLine();
                    string bookcatlist1= Console.ReadLine();
                    int booklistvamount1= int.Parse(Console.ReadLine());
                    if(bookAmount <= 100)
                    {
                        Console.WriteLine("Book amount should be greater than 100");
                        break;
                    }
                    var book = new Book(booknamectitle1,bookcatlist1,booklistvamount1);
                    int id = BookManager.AddBook(book);      
                    Console.WriteLine("Book "+id+" added successfully");
                    break;
                }
            }
   #endregion
        }
    }


    #region Solution-2
    class Book
    {
        static int tidno = 1000;

        public Book(string booknamectitle1, string bookcatlist1, int booklistvamount1)
        {
            BookId = tidno++;
            BookTitle = booknamectitle1;
            BookCategory = bookcatlist1;
            BookAmount = booklistvamount1;
        }

        public int BookId { get; set; }
        public string BookTitle { get; set; }
        public string BookCategory { get; set; }
        public int BookAmount { get; set; }
                

    }
    #endregion
    
    #region Solution-3
    static class BookManager
    {
        public static List<Book> Books = new List<Book>();

        internal static int AddBook(Book book)
        {
            Books.Add(book);
            return book.BookId;
        }

        internal static Book FindCostliestunderBook(string category)
        {
            return Books.Where(s => s.BookCategory.ToLower() == category).OrderByDescending(s => s.BookAmount).FirstOrDefault();
        }

        internal static List<Book> Delete(int id)
        {
            Book b = Books.FirstOrDefault(s => s.BookId == id);
            Books.Remove(b);
            return Books;
        }
    }
    #endregion
    
    #region miscellaneous
    
    #endregion

}